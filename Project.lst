Microsoft (R) Macro Assembler Version 14.00.24210.0	    06/05/17 19:20:11
AddTwo.asm						     Page 1 - 1




				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C 
			      C ;  Standard MS-Windows Virtual Key definitions
			      C 
 = 00000001		      C VK_LBUTTON      = 01H
 = 00000002		      C VK_RBUTTON      = 02H
 = 00000003		      C VK_CANCEL       = 03H
 = 00000008		      C VK_BACK         = 08H
 = 00000009		      C VK_TAB          = 09H
 = 0000000C		      C VK_CLEAR        = 0cH
 = 0000000D		      C VK_RETURN       = 0dH
 = 00000010		      C VK_SHIFT        = 10H
 = 00000011		      C VK_CONTROL      = 11H
 = 00000012		      C VK_MENU         = 12H
 = 00000013		      C VK_PAUSE        = 13H
 = 00000014		      C VK_CAPITAL      = 14H
 = 0000001B		      C VK_ESCAPE       = 1bH
 = 00000020		      C VK_SPACE        = 20H
			      C 
 = 00000021		      C VK_PRIOR        = 21H
 = 00000022		      C VK_NEXT         = 22H
 = 00000023		      C VK_END          = 23H
 = 00000024		      C VK_HOME         = 24H
 = 00000025		      C VK_LEFT         = 25H
 = 00000026		      C VK_UP           = 26H
 = 00000027		      C VK_RIGHT        = 27H
 = 00000028		      C VK_DOWN         = 28H
			      C 
			      C ;  VK_A thru VK_Z are the same as their ASCII equivalents: 'A' thru 'Z'
			      C ;  VK_0 thru VK_9 are the same as their ASCII equivalents: '0' thru '0'
			      C 
 = 0000002A		      C VK_PRINT        = 2aH
 = 0000002B		      C VK_EXECUTE      = 2bH
 = 0000002C		      C VK_SNAPSHOT     = 2ch   ; Printscreen key..
 = 0000002D		      C VK_INSERT       = 2dH
 = 0000002E		      C VK_DELETE       = 2eH
 = 0000002F		      C VK_HELP         = 2fH
			      C 
 = 00000060		      C VK_NUMPAD0      = 60H
 = 00000061		      C VK_NUMPAD1      = 61H
 = 00000062		      C VK_NUMPAD2      = 62H
 = 00000063		      C VK_NUMPAD3      = 63H
 = 00000064		      C VK_NUMPAD4      = 64H
 = 00000065		      C VK_NUMPAD5      = 65H
 = 00000066		      C VK_NUMPAD6      = 66H
 = 00000067		      C VK_NUMPAD7      = 67H
 = 00000068		      C VK_NUMPAD8      = 68H
 = 00000069		      C VK_NUMPAD9      = 69H
 = 0000006A		      C VK_MULTIPLY     = 6AH
 = 0000006B		      C VK_ADD          = 6BH
 = 0000006C		      C VK_SEPARATER    = 6CH
 = 0000006D		      C VK_SUBTRACT     = 6DH
 = 0000006E		      C VK_DECIMAL      = 6EH
 = 0000006F		      C VK_DIVIDE       = 6FH
			      C 
 = 00000070		      C VK_F1           = 70H
 = 00000071		      C VK_F2           = 71H
 = 00000072		      C VK_F3           = 72H
 = 00000073		      C VK_F4           = 73H
 = 00000074		      C VK_F5           = 74H
 = 00000075		      C VK_F6           = 75H
 = 00000076		      C VK_F7           = 76H
 = 00000077		      C VK_F8           = 77H
 = 00000078		      C VK_F9           = 78H
 = 00000079		      C VK_F10          = 79H
 = 0000007A		      C VK_F11          = 7aH
 = 0000007B		      C VK_F12          = 7bH
 = 0000007C		      C VK_F13          = 7cH
 = 0000007D		      C VK_F14          = 7dH
 = 0000007E		      C VK_F15          = 7eH
 = 0000007F		      C VK_F16          = 7fH
 = 00000080		      C VK_F17          = 80H
 = 00000081		      C VK_F18          = 81H
 = 00000082		      C VK_F19          = 82H
 = 00000083		      C VK_F20          = 83H
 = 00000084		      C VK_F21          = 84H
 = 00000085		      C VK_F22          = 85H
 = 00000086		      C VK_F23          = 86H
 = 00000087		      C VK_F24          = 87H
			      C 
 = 00000090		      C VK_NUMLOCK      = 90H
 = 00000091		      C VK_SCROLL       = 91H
			      C 

 00000000			.data

 = 0dh,0ah			endl EQU <0dh,0ah>	; end of line sequence
 00000000			message LABEL BYTE
 00000000  20 20 20 20 20		BYTE "                                                                          " ,endl
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 0D
	   0A
 0000004C  20 20 20 20 20		BYTE "                                                                          " ,endl
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 0D
	   0A
 00000098  20 20 20 20 20		BYTE "      __   __  _______  __    _  _______  __   __  _______  __    _       " ,endl
	   20 5F 5F 20 20
	   20 5F 5F 20 20
	   5F 5F 5F 5F 5F
	   5F 5F 20 20 5F
	   5F 20 20 20 20
	   5F 20 20 5F 5F
	   5F 5F 5F 5F 5F
	   20 20 5F 5F 20
	   20 20 5F 5F 20
	   20 5F 5F 5F 5F
	   5F 5F 5F 20 20
	   5F 5F 20 20 20
	   20 5F 20 20 20
	   20 20 20 20 0D
	   0A
 000000E4  20 20 20 20 20		BYTE "     |  | |  ||   _   ||  |  | ||       ||  |_|  ||   _   ||  |  | |      " ,endl
	   7C 20 20 7C 20
	   7C 20 20 7C 7C
	   20 20 20 5F 20
	   20 20 7C 7C 20
	   20 7C 20 20 7C
	   20 7C 7C 20 20
	   20 20 20 20 20
	   7C 7C 20 20 7C
	   5F 7C 20 20 7C
	   7C 20 20 20 5F
	   20 20 20 7C 7C
	   20 20 7C 20 20
	   7C 20 7C 20 20
	   20 20 20 20 0D
	   0A
 00000130  20 20 20 20 20		BYTE "     |  |_|  ||  |_|  ||   |_| ||    ___||       ||  |_|  ||   |_| |      " ,endl
	   7C 20 20 7C 5F
	   7C 20 20 7C 7C
	   20 20 7C 5F 7C
	   20 20 7C 7C 20
	   20 20 7C 5F 7C
	   20 7C 7C 20 20
	   20 20 5F 5F 5F
	   7C 7C 20 20 20
	   20 20 20 20 7C
	   7C 20 20 7C 5F
	   7C 20 20 7C 7C
	   20 20 20 7C 5F
	   7C 20 7C 20 20
	   20 20 20 20 0D
	   0A
 0000017C  20 20 20 20 20		BYTE "     |       ||       ||       ||   | __ |       ||       ||       |      " ,endl
	   7C 20 20 20 20
	   20 20 20 7C 7C
	   20 20 20 20 20
	   20 20 7C 7C 20
	   20 20 20 20 20
	   20 7C 7C 20 20
	   20 7C 20 5F 5F
	   20 7C 20 20 20
	   20 20 20 20 7C
	   7C 20 20 20 20
	   20 20 20 7C 7C
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 0D
	   0A
 000001C8  20 20 20 20 20		BYTE "     |       ||       ||  _    ||   ||  ||       ||       ||  _    |      " ,endl
	   7C 20 20 20 20
	   20 20 20 7C 7C
	   20 20 20 20 20
	   20 20 7C 7C 20
	   20 5F 20 20 20
	   20 7C 7C 20 20
	   20 7C 7C 20 20
	   7C 7C 20 20 20
	   20 20 20 20 7C
	   7C 20 20 20 20
	   20 20 20 7C 7C
	   20 20 5F 20 20
	   20 20 7C 20 20
	   20 20 20 20 0D
	   0A
 00000214  20 20 20 20 20		BYTE "     |   _   ||   _   || | |   ||   |_| || ||_|| ||   _   || | |   |      " ,endl
	   7C 20 20 20 5F
	   20 20 20 7C 7C
	   20 20 20 5F 20
	   20 20 7C 7C 20
	   7C 20 7C 20 20
	   20 7C 7C 20 20
	   20 7C 5F 7C 20
	   7C 7C 20 7C 7C
	   5F 7C 7C 20 7C
	   7C 20 20 20 5F
	   20 20 20 7C 7C
	   20 7C 20 7C 20
	   20 20 7C 20 20
	   20 20 20 20 0D
	   0A
 00000260  20 20 20 20 20		BYTE "     |__| |__||__| |__||_|  |__||_______||_|   |_||__| |__||_|  |__|      " ,endl
	   7C 5F 5F 7C 20
	   7C 5F 5F 7C 7C
	   5F 5F 7C 20 7C
	   5F 5F 7C 7C 5F
	   7C 20 20 7C 5F
	   5F 7C 7C 5F 5F
	   5F 5F 5F 5F 5F
	   7C 7C 5F 7C 20
	   20 20 7C 5F 7C
	   7C 5F 5F 7C 20
	   7C 5F 5F 7C 7C
	   5F 7C 20 20 7C
	   5F 5F 7C 20 20
	   20 20 20 20 0D
	   0A
 000002AC  20 20 20 20 20		BYTE "                                                                          " ,endl
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 0D
	   0A
 000002F8  20 20 20 20 20		BYTE "     Copyright (C) 2017  Stefan TESANOVIC 2016/675                        " ,endl
	   43 6F 70 79 72
	   69 67 68 74 20
	   28 43 29 20 32
	   30 31 37 20 20
	   53 74 65 66 61
	   6E 20 54 45 53
	   41 4E 4F 56 49
	   43 20 32 30 31
	   36 2F 36 37 35
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 0D
	   0A
 00000344  20 20 20 20 20		BYTE "                         Predrag MITROVIC 2016/678                        " ,endl
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   50 72 65 64 72
	   61 67 20 4D 49
	   54 52 4F 56 49
	   43 20 32 30 31
	   36 2F 36 37 38
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 0D
	   0A
 00000390  20 20 20 20 20		BYTE "                                                                          " ,endl
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 0D
	   0A
 000003DC 000003DC		messageSize DWORD ($-message)
 000003E0 00000000		consoleHandle HANDLE 0     ; handle to standard output device
 000003E4 00000000		bytesWritten  DWORD ?      ; number of bytes written

 000003E8			HANGMAN_GOODGAME_00 LABEL BYTE 
 000003E8  2B 2D 2D 2D 2D						BYTE "+------+       ",endl
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0D 0A
 000003F9  7C 20 20 20 20	                    BYTE "|      |       ",endl
	   20 20 7C 20 20
	   20 20 20 20 20
	   0D 0A
 0000040A  7C 20 20 20 20	                    BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 0000041B  7C 20 20 20 20	                    BYTE "|      O       ",endl
	   20 20 4F 20 20
	   20 20 20 20 20
	   0D 0A
 0000042C  7C 20 20 20 20	                    BYTE "|     /|\      ",endl
	   20 2F 7C 5C 20
	   20 20 20 20 20
	   0D 0A
 0000043D  7C 20 20 20 20	                    BYTE "|     / \      ",endl
	   20 2F 20 5C 20
	   20 20 20 20 20
	   0D 0A
 0000044E  2B 2D 2D 2D 2D	                    BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A
 0000045F  7C 20 59 4F 55	                    BYTE "| YOU   WIN  | ",endl
	   20 20 20 57 49
	   4E 20 20 7C 20
	   0D 0A
 00000470  2B 2D 2D 2D 2D	                    BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A
 00000481 00000099		messageSizeGoodGame DWORD ($-HANGMAN_GOODGAME_00)

 00000485			HANGMAN_GOODGAME_01 LABEL BYTE 
 00000485  2B 2D 2D 2D 2D						BYTE "+------+       ",endl
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0D 0A
 00000496  7C 20 20 20 20	                    BYTE "|      |       ",endl
	   20 20 7C 20 20
	   20 20 20 20 20
	   0D 0A
 000004A7  7C 20 20 20 20	                    BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 000004B8  7C 20 20 20 20	                    BYTE "|      O_      ",endl
	   20 20 4F 5F 20
	   20 20 20 20 20
	   0D 0A
 000004C9  7C 20 20 20 20	                    BYTE "|     /|       ",endl
	   20 2F 7C 20 20
	   20 20 20 20 20
	   0D 0A
 000004DA  7C 20 20 20 20	                    BYTE "|     / \      ",endl
	   20 2F 20 5C 20
	   20 20 20 20 20
	   0D 0A
 000004EB  2B 2D 2D 2D 2D	                    BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A
 000004FC  7C 20 59 4F 55	                    BYTE "| YOU   WIN  | ",endl
	   20 20 20 57 49
	   4E 20 20 7C 20
	   0D 0A
 0000050D  2B 2D 2D 2D 2D	                    BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A

 0000051E			HANGMAN_GOODGAME_02 LABEL BYTE 
 0000051E  2B 2D 2D 2D 2D						BYTE "+------+       ",endl
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0D 0A
 0000052F  7C 20 20 20 20	                    BYTE "|      |       ",endl
	   20 20 7C 20 20
	   20 20 20 20 20
	   0D 0A
 00000540  7C 20 20 20 20	                    BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 00000551  7C 20 20 20 20	                    BYTE "|      O/      ",endl
	   20 20 4F 2F 20
	   20 20 20 20 20
	   0D 0A
 00000562  7C 20 20 20 20	                    BYTE "|     /|       ",endl
	   20 2F 7C 20 20
	   20 20 20 20 20
	   0D 0A
 00000573  7C 20 20 20 20	                    BYTE "|     / \      ",endl
	   20 2F 20 5C 20
	   20 20 20 20 20
	   0D 0A
 00000584  2B 2D 2D 2D 2D	                    BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A
 00000595  7C 20 59 4F 55	                    BYTE "| YOU   WIN  | ",endl
	   20 20 20 57 49
	   4E 20 20 7C 20
	   0D 0A
 000005A6  2B 2D 2D 2D 2D	                    BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A

 000005B7			HANGMAN_GOODGAME_03 LABEL BYTE 
 000005B7  2B 2D 2D 2D 2D						BYTE "+------+       ",endl
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0D 0A
 000005C8  7C 20 20 20 20	                    BYTE "|      |       ",endl
	   20 20 7C 20 20
	   20 20 20 20 20
	   0D 0A
 000005D9  7C 20 20 20 20	                    BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 000005EA  7C 20 20 20 20	                    BYTE "|      O_      ",endl
	   20 20 4F 5F 20
	   20 20 20 20 20
	   0D 0A
 000005FB  7C 20 20 20 20	                    BYTE "|     /|       ",endl
	   20 2F 7C 20 20
	   20 20 20 20 20
	   0D 0A
 0000060C  7C 20 20 20 20	                    BYTE "|     / \      ",endl
	   20 2F 20 5C 20
	   20 20 20 20 20
	   0D 0A
 0000061D  2B 2D 2D 2D 2D	                    BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A
 0000062E  7C 20 59 4F 55	                    BYTE "| YOU   WIN  | ",endl
	   20 20 20 57 49
	   4E 20 20 7C 20
	   0D 0A
 0000063F  2B 2D 2D 2D 2D	                    BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A

 00000650			HANGMAN_GAMEOVER_00 LABEL BYTE 
 00000650  2B 2D 2D 2D 2D						BYTE "+------+       ",endl
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0D 0A
 00000661  7C 20 20 20 20	                    BYTE "|      |       ",endl
	   20 20 7C 20 20
	   20 20 20 20 20
	   0D 0A
 00000672  7C 20 20 20 20	                    BYTE "|      O       ",endl
	   20 20 4F 20 20
	   20 20 20 20 20
	   0D 0A
 00000683  7C 20 20 20 20	                    BYTE "|     /|\      ",endl
	   20 2F 7C 5C 20
	   20 20 20 20 20
	   0D 0A
 00000694  7C 20 20 20 20	                    BYTE "|     / \      ",endl
	   20 2F 20 5C 20
	   20 20 20 20 20
	   0D 0A
 000006A5  7C 20 20 20 20	                    BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 000006B6  2B 2D 2D 2D 2D	                    BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A
 000006C7  7C 20 20 59 4F	                    BYTE "|  YOU  DIE  | ",endl
	   55 20 20 44 49
	   45 20 20 7C 20
	   0D 0A
 000006D8  2B 2D 2D 2D 2D	                    BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A

 000006E9			HANGMAN_GAMEOVER_01 LABEL BYTE 
 000006E9  2B 2D 2D 2D 2D						BYTE "+------+       ",endl
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0D 0A
 000006FA  7C 20 20 20 20	                    BYTE "|     /        ",endl
	   20 2F 20 20 20
	   20 20 20 20 20
	   0D 0A
 0000070B  7C 20 20 20 5F	                    BYTE "|   _O         ",endl
	   4F 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 0000071C  7C 20 20 5F 2F	                    BYTE "|  _/\         ",endl
	   5C 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 0000072D  7C 20 20 20 5C	                    BYTE "|   \          ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 0000073E  7C 20 20 20 20	                    BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 0000074F  2B 2D 2D 2D 2D	                    BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A
 00000760  7C 20 20 59 4F	                    BYTE "|  YOU  DIE  | ",endl
	   55 20 20 44 49
	   45 20 20 7C 20
	   0D 0A
 00000771  2B 2D 2D 2D 2D	                    BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A

 00000782			HANGMAN_GAMEOVER_02 LABEL BYTE 
 00000782  2B 2D 2D 2D 2D						BYTE "+------+       ",endl
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0D 0A
 00000793  7C 20 20 20 20	                    BYTE "|      |       ",endl
	   20 20 7C 20 20
	   20 20 20 20 20
	   0D 0A
 000007A4  7C 20 20 20 20	                    BYTE "|      O       ",endl
	   20 20 4F 20 20
	   20 20 20 20 20
	   0D 0A
 000007B5  7C 20 20 20 20	                    BYTE "|     /|\      ",endl
	   20 2F 7C 5C 20
	   20 20 20 20 20
	   0D 0A
 000007C6  7C 20 20 20 20	                    BYTE "|     / \      ",endl
	   20 2F 20 5C 20
	   20 20 20 20 20
	   0D 0A
 000007D7  7C 20 20 20 20	                    BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 000007E8  2B 2D 2D 2D 2D	                    BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A
 000007F9  7C 20 20 59 4F	                    BYTE "|  YOU  DIE  | ",endl
	   55 20 20 44 49
	   45 20 20 7C 20
	   0D 0A
 0000080A  2B 2D 2D 2D 2D	                    BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A

 0000081B			HANGMAN_GAMEOVER_03 LABEL BYTE 
 0000081B  2B 2D 2D 2D 2D						BYTE "+------+       ",endl
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0D 0A
 0000082C  7C 20 20 20 20	                    BYTE "|       \      ",endl
	   20 20 20 5C 20
	   20 20 20 20 20
	   0D 0A
 0000083D  7C 20 20 20 20	                    BYTE "|        O_    ",endl
	   20 20 20 20 4F
	   5F 20 20 20 20
	   0D 0A
 0000084E  7C 20 20 20 20	                    BYTE "|        /\_   ",endl
	   20 20 20 20 2F
	   5C 5F 20 20 20
	   0D 0A
 0000085F  7C 20 20 20 20	                    BYTE "|         /    ",endl
	   20 20 20 20 20
	   2F 20 20 20 20
	   0D 0A
 00000870  7C 20 20 20 20	                    BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 00000881  2B 2D 2D 2D 2D	                    BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A
 00000892  7C 20 20 59 4F	                    BYTE "|  YOU  DIE  | ",endl
	   55 20 20 44 49
	   45 20 20 7C 20
	   0D 0A
 000008A3  2B 2D 2D 2D 2D	                    BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A

 000008B4			HANGMAN_LIVES_06 LABEL BYTE 
 000008B4  2B 2D 2D 2D 2D						BYTE "+------+       ",endl
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0D 0A
 000008C5  7C 20 20 20 20						BYTE "|      |       ",endl
	   20 20 7C 20 20
	   20 20 20 20 20
	   0D 0A
 000008D6  7C 20 20 20 20						BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 000008E7  7C 20 20 20 20						BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 000008F8  7C 20 20 20 20						BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 00000909  7C 20 20 20 20						BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 0000091A  2B 2D 2D 2D 2D						BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A
 0000092B  7C 20 20 20 20						BYTE "|            | ",endl
	   20 20 20 20 20
	   20 20 20 7C 20
	   0D 0A
 0000093C  2B 2D 2D 2D 2D						BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A

 0000094D			HANGMAN_LIVES_05 LABEL BYTE 
 0000094D  2B 2D 2D 2D 2D						BYTE "+------+       ",endl 
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0D 0A
 0000095E  7C 20 20 20 20						BYTE "|      |       ",endl
	   20 20 7C 20 20
	   20 20 20 20 20
	   0D 0A
 0000096F  7C 20 20 20 20						BYTE "|      O       ",endl
	   20 20 4F 20 20
	   20 20 20 20 20
	   0D 0A
 00000980  7C 20 20 20 20						BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 00000991  7C 20 20 20 20						BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 000009A2  7C 20 20 20 20						BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 000009B3  2B 2D 2D 2D 2D						BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A
 000009C4  7C 20 20 20 20						BYTE "|            | ",endl
	   20 20 20 20 20
	   20 20 20 7C 20
	   0D 0A
 000009D5  2B 2D 2D 2D 2D						BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A

 000009E6			HANGMAN_LIVES_04 LABEL BYTE 
 000009E6  2B 2D 2D 2D 2D						BYTE "+------+       ",endl
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0D 0A
 000009F7  7C 20 20 20 20						BYTE "|      |       ",endl
	   20 20 7C 20 20
	   20 20 20 20 20
	   0D 0A
 00000A08  7C 20 20 20 20						BYTE "|      O       ",endl
	   20 20 4F 20 20
	   20 20 20 20 20
	   0D 0A
 00000A19  7C 20 20 20 20						BYTE "|      |       ",endl
	   20 20 7C 20 20
	   20 20 20 20 20
	   0D 0A
 00000A2A  7C 20 20 20 20						BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 00000A3B  7C 20 20 20 20						BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 00000A4C  2B 2D 2D 2D 2D						BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A
 00000A5D  7C 20 20 20 20						BYTE "|            | ",endl
	   20 20 20 20 20
	   20 20 20 7C 20
	   0D 0A
 00000A6E  2B 2D 2D 2D 2D						BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A

 00000A7F			HANGMAN_LIVES_03 LABEL BYTE 
 00000A7F  2B 2D 2D 2D 2D						BYTE "+------+       ",endl
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0D 0A
 00000A90  7C 20 20 20 20						BYTE "|      |       ",endl
	   20 20 7C 20 20
	   20 20 20 20 20
	   0D 0A
 00000AA1  7C 20 20 20 20						BYTE "|      O       ",endl
	   20 20 4F 20 20
	   20 20 20 20 20
	   0D 0A
 00000AB2  7C 20 20 20 20						BYTE "|     /|       ",endl
	   20 2F 7C 20 20
	   20 20 20 20 20
	   0D 0A
 00000AC3  7C 20 20 20 20						BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 00000AD4  7C 20 20 20 20						BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 00000AE5  2B 2D 2D 2D 2D						BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A
 00000AF6  7C 20 20 20 20						BYTE "|            | ",endl
	   20 20 20 20 20
	   20 20 20 7C 20
	   0D 0A
 00000B07  2B 2D 2D 2D 2D						BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A

 00000B18			HANGMAN_LIVES_02 LABEL BYTE 
 00000B18  2B 2D 2D 2D 2D						BYTE "+------+       ",endl
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0D 0A
 00000B29  7C 20 20 20 20						BYTE "|      |       ",endl
	   20 20 7C 20 20
	   20 20 20 20 20
	   0D 0A
 00000B3A  7C 20 20 20 20						BYTE "|      O       ",endl
	   20 20 4F 20 20
	   20 20 20 20 20
	   0D 0A
 00000B4B  7C 20 20 20 20						BYTE "|     /|\      ",endl
	   20 2F 7C 5C 20
	   20 20 20 20 20
	   0D 0A
 00000B5C  7C 20 20 20 20						BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 00000B6D  7C 20 20 20 20						BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 00000B7E  2B 2D 2D 2D 2D						BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A
 00000B8F  7C 20 20 20 20						BYTE "|            | ",endl
	   20 20 20 20 20
	   20 20 20 7C 20
	   0D 0A
 00000BA0  2B 2D 2D 2D 2D						BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A

 00000BB1			HANGMAN_LIVES_01 LABEL BYTE 
 00000BB1  2B 2D 2D 2D 2D						BYTE "+------+       ",endl
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0D 0A
 00000BC2  7C 20 20 20 20						BYTE "|      |       ",endl
	   20 20 7C 20 20
	   20 20 20 20 20
	   0D 0A
 00000BD3  7C 20 20 20 20						BYTE "|      O       ",endl
	   20 20 4F 20 20
	   20 20 20 20 20
	   0D 0A
 00000BE4  7C 20 20 20 20						BYTE "|     /|\      ",endl
	   20 2F 7C 5C 20
	   20 20 20 20 20
	   0D 0A
 00000BF5  7C 20 20 20 20						BYTE "|     /        ",endl
	   20 2F 20 20 20
	   20 20 20 20 20
	   0D 0A
 00000C06  7C 20 20 20 20						BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 00000C17  2B 2D 2D 2D 2D						BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A
 00000C28  7C 20 20 20 20						BYTE "|            | ",endl
	   20 20 20 20 20
	   20 20 20 7C 20
	   0D 0A
 00000C39  2B 2D 2D 2D 2D						BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A

 00000C4A			HANGMAN_LIVES_00 LABEL BYTE 
 00000C4A  2B 2D 2D 2D 2D						BYTE "+------+       ",endl
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0D 0A
 00000C5B  7C 20 20 20 20						BYTE "|      |       ",endl
	   20 20 7C 20 20
	   20 20 20 20 20
	   0D 0A
 00000C6C  7C 20 20 20 20						BYTE "|      O       ",endl
	   20 20 4F 20 20
	   20 20 20 20 20
	   0D 0A
 00000C7D  7C 20 20 20 20						BYTE "|     /|\      ",endl
	   20 2F 7C 5C 20
	   20 20 20 20 20
	   0D 0A
 00000C8E  7C 20 20 20 20						BYTE "|     / \      ",endl
	   20 2F 20 5C 20
	   20 20 20 20 20
	   0D 0A
 00000C9F  7C 20 20 20 20						BYTE "|              ",endl
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 00000CB0  2B 2D 2D 2D 2D						BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A
 00000CC1  7C 20 20 20 20						BYTE "|            | ",endl
	   20 20 20 20 20
	   20 20 20 7C 20
	   0D 0A
 00000CD2  2B 2D 2D 2D 2D						BYTE "+------------+ ",endl
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2B 20
	   0D 0A

				; random number what we generete
 00000CE3 00000000		ranNum DWORD ?		

				;All words what is posible to guess. 
				;Pick by random generartor and put in selectedWords
 00000CE7 42 49 43 59 43	manyWords	BYTE "BICYCLE",	0
	   4C 45 00
 00000CEF  43 41 4E 4F 45				BYTE "CANOE", 0
	   00
 00000CF5  53 43 41 54 45				BYTE "SCATEBOARD", 0
	   42 4F 41 52 44
	   00
 00000D00  4F 46 46 53 49				BYTE "OFFSIDE", 0
	   44 45 00
 00000D08  54 45 4E 4E 49				BYTE "TENNIS", 0
	   53 00
 00000D0F  53 4F 46 54 42				BYTE "SOFTBALL", 0
	   41 4C 4C 00
 00000D18  4B 4E 4F 43 4B				BYTE "KNOCKOUT", 0
	   4F 55 54 00
 00000D21  43 48 41 4C 4C				BYTE "CHALLENGE", 0
	   45 4E 47 45 00
 00000D2B  53 4C 41 4C 4F				BYTE "SLALOM", 0
	   4D 00
 00000D32  4D 41 52 41 54				BYTE "MARATHON", 0
	   48 4F 4E 00
 00000D3B  00						BYTE 0					; End of list
 00000D3C = 00000055		len equ $ - manyWords

				; number what we make to know where are you in game
 00000D3C 00000000		statusGameLive DWORD ?		

				;Wordls what we select by rundom code
 00000D40 20 20 20 20 20	selectedWords BYTE "                    ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
				;Use as variable in funcstion for lenght of Array
 00000D55 00000000		lengthArray DWORD ?

				;Letter what we guess, input from keyboard
 00000D59 00			guessLetter BYTE ?
				;World what we print with -------,0
 00000D5A  00000032 [		guessWords BYTE 50 DUP (?)
	    00
	   ]
				;Array of guess Letter
 00000D8C  00000032 [		guessLetterArray BYTE 50 DUP (?)
	    00
	   ]
				;Letter what are unknows, change with - 
 00000DBE 2D			letterDash BYTE '-'

 = 000003E8			drowDelay = 1000	; delay 1 sec
 00000DBF 0F			var_loop BYTE 15	; repeat 15 times
					
 00000000			.code

 00000000			main PROC

				  ; Get the console output handle:
					INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000000  6A F5	   *	    push    -00000000Bh
 00000002  E8 00000000 E   *	    call   GetStdHandle
 00000007  A3 000003E0 R		mov consoleHandle,eax

				  ; Write a string to the console:
					INVOKE WriteConsole,
						consoleHandle,				;console output handle
						ADDR message,       		; string pointer
						messageSize,				; string length
						ADDR bytesWritten,			; returns num bytes written
						0							; not used
 0000000C  6A 00	   *	    push   +000000000h
 0000000E  68 000003E4 R   *	    push   OFFSET bytesWritten
 00000013  FF 35 000003DC R *	    push   messageSize
 00000019  68 00000000 R   *	    push   OFFSET message
 0000001E  FF 35 000003E0 R *	    push   consoleHandle
 00000024  E8 00000000 E   *	    call   WriteConsoleA

				  ;Part of code for generate random number from 0 until 9
 00000029  B8 0000000A			mov  eax,10			;get random 0 to 9
 0000002E  E8 00000000 E		call Randomize		;re-seed generator
 00000033  E8 00000000 E		call RandomRange   
 00000038  A3 00000CE3 R		mov  ranNum,eax		;save random number
					
 0000003D  E8 00000000 E		call WriteDec
 00000042  E8 00000000 E		call Crlf			;new line

				  ;Find a selectedWords base on generate ranNum from manyWords
 00000047  8B 15 00000CE3 R		mov edx, ranNum     ;Index
 0000004D  E8 00000390			call find_str       ;Returns EDI = pointer to string, we pick world

				  ;Copy find world in variable selectedWords
					INVOKE Str_copy,
				        ADDR [edi],
				        ADDR selectedWords
 00000052  68 00000D40 R   *	    push   OFFSET selectedWords
 00000057  8D 07	   *	    lea    eax,  [edi]
 00000059  50		   *	    push   eax
 0000005A  E8 00000000 E   *	    call   Str_copy
				  
				  ;Print selectedWords on screen	
 0000005F  BA 00000D40 R		mov edx, offset selectedWords
 00000064  E8 00000000 E		call WriteString
 00000069  E8 00000000 E		call Crlf			;new line

				  ;Make array of dash. It would be world what we guess
 0000006E  E8 00000386			call make_array_dash

				  ;Inicialization number of life what you have
 00000073  C7 05 00000D3C R		mov statusGameLive, 6
	   00000006

 0000007D			again_input_world:

				  ;Print figure depending on the number of lives
 0000007D  E8 000003BF			call print_hangman_live

				  ;Check if you have more live. If player lost all lives, game is over
 00000082  83 3D 00000D3C R		cmp statusGameLive, 0
	   00
 00000089  0F 84 00000240		je loop_game_over


 0000008F  B8 00000002			mov  eax,green+(black*16)
 00000094  E8 00000000 E	    call SetTextColor

					mWrite <"Guess a letter: ">
 00000DC0		     1		.data		
 00000DC0 47 75 65 73 73     1		??0000 BYTE "Guess a letter: ",0	
	   20 61 20 6C 65
	   74 74 65 72 3A
	   20 00
 00000099		     1		.code
 00000099  52		     1		push	edx
 0000009A  BA 00000DC0 R     1		mov	edx,OFFSET ??0000
 0000009F  E8 00000000 E     1		call	WriteString
 000000A4  5A		     1		pop	edx

 000000A5  E8 00000000 E		call readChar	;User inputs char
 000000AA  3C 1B			cmp al, 27		;Check if is press ESC
 000000AC  0F 84 00000093		je exit_main	;YES, end game
 000000B2  24 DF			and al, 0DFH	;Convert lowercase input to uppercase. 
									;If uppercase, it remains uppercase
 000000B4  50				push eax
 000000B5  2C 41			sub al, 'A'		;checks if it is a letter
 000000B7  3C 19		    cmp al, 'Z'-'A'
 000000B9  76 02		    jbe uppercase
 000000BB  EB C0			jmp again_input_world
 000000BD			uppercase:
 000000BD  58				pop eax
 000000BE  A2 00000D59 R		mov guessLetter, al
 000000C3  E8 00000000 E		call WriteChar
 000000C8  E8 00000000 E		call Crlf		;new line
 000000CD  E8 00000000 E		call Crlf		;new line

 000000D2  B8 0000000F			mov  eax,white+(black*16)
 000000D7  E8 00000000 E	    call SetTextColor


					;Check if letter is alredy guessed
 000000DC  B9 00000032			mov ecx, LENGTHOF guessLetterArray
 000000E1  BF 00000D8C R		mov edi, offset guessLetterArray
 000000E6  A0 00000D59 R		mov al, guessLetter                 ; Load character to find
 000000EB  F2/ AE			repne scasb                         ; Search
 000000ED  74 5D			je loop_guess_letter_exists			; Letter already exist
						

 000000EF  E8 00000327			call make_array_guess_letter 


					;Check if letter is in selectedWords. If not take life
 000000F4  B9 00000015			mov ecx, LENGTHOF selectedWords
 000000F9  BF 00000D40 R		mov edi, offset selectedWords
 000000FE  A0 00000D59 R		mov al, guessLetter                 ; Load character to find
 00000103  F2/ AE			repne scasb                         ; Search
 00000105  0F 85 000000A6		jne loop_take_live					; Letter exist take life


				  ; We are making new array, guess letter whange dash on right pleace
 0000010B  BE 00000D40 R	    mov esi, offset selectedWords       ; Source
 00000110  BF 00000D5A R	    mov edi, offset guessWords          ; Destination
 00000115  B9 00000015		    mov ecx, LENGTHOF selectedWords     ; Number of bytes to check
 0000011A  A0 00000D59 R	    mov al, guessLetter                 ; Search for that character
 0000011F  33 DB		    xor ebx, ebx                        ; Index EBX = 0

 00000121			ride_hard_loop:
 00000121  38 04 33		    cmp [esi+ebx], al                   ; Compare memory/register
 00000124  75 03		    jne @F                              ; Skip next line if no match
 00000126  88 04 3B		    mov [edi+ebx], al                   ; Hang 'em lower
 00000129			    @@:
 00000129  43			    inc ebx                             ; Increment pointer
 0000012A  49			    dec ecx                             ; Decrement counter
 0000012B  75 F4		    jne ride_hard_loop                  ; Jump if ECX != 0

				 
				  ;Is there more letter to guess of we finish
 0000012D  B9 00000032			mov ecx, LENGTHOF guessWords		
 00000132  BF 00000D5A R	    mov edi, offset guessWords
 00000137  A0 00000DBE R	    mov al, letterDash                  ; Load character to find
 0000013C  F2/ AE		    repne scasb							; Search
 0000013E  75 7C		    jne loop_game_win					; No more letter
 00000140  E9 FFFFFF38			jmp again_input_world				; Guess next world


 00000145			exit_main:
						
					INVOKE ExitProcess,0
 00000145  6A 00	   *	    push   +000000000h
 00000147  E8 00000000 E   *	    call   ExitProcess

 0000014C			loop_guess_letter_exists:

 0000014C  B8 00000004				mov  eax,red+(black*16)
 00000151  E8 00000000 E			call SetTextColor
						
						mWrite <"Sorry, you alredy guessed letter, ">
 00000DD1		     1		.data		
 00000DD1 53 6F 72 72 79     1		??0001 BYTE "Sorry, you alredy guessed letter, ",0	
	   2C 20 79 6F 75
	   20 61 6C 72 65
	   64 79 20 67 75
	   65 73 73 65 64
	   20 6C 65 74 74
	   65 72 2C 20 00
 00000156		     1		.code
 00000156  52		     1		push	edx
 00000157  BA 00000DD1 R     1		mov	edx,OFFSET ??0001
 0000015C  E8 00000000 E     1		call	WriteString
 00000161  5A		     1		pop	edx
 00000162  A0 00000D59 R			mov al, guessLetter
 00000167  E8 00000000 E			call WriteChar
 0000016C  E8 00000000 E			call Crlf                       ; new line
						mWrite <"I repeat you one more time the letter what you guessed. ">
 00000DF4		     1		.data		
 00000DF4 49 20 72 65 70     1		??0002 BYTE "I repeat you one more time the letter what you guessed. ",0	
	   65 61 74 20 79
	   6F 75 20 6F 6E
	   65 20 6D 6F 72
	   65 20 74 69 6D
	   65 20 74 68 65
	   20 6C 65 74 74
	   65 72 20 77 68
	   61 74 20 79 6F
	   75 20 67 75 65
	   73 73 65 64 2E
	   20 00
 00000171		     1		.code
 00000171  52		     1		push	edx
 00000172  BA 00000DF4 R     1		mov	edx,OFFSET ??0002
 00000177  E8 00000000 E     1		call	WriteString
 0000017C  5A		     1		pop	edx
 0000017D  E8 00000000 E			call Crlf                       ; new line
						mWrite <"Guessed letter are: ">
 00000E2D		     1		.data		
 00000E2D 47 75 65 73 73     1		??0003 BYTE "Guessed letter are: ",0	
	   65 64 20 6C 65
	   74 74 65 72 20
	   61 72 65 3A 20
	   00
 00000182		     1		.code
 00000182  52		     1		push	edx
 00000183  BA 00000E2D R     1		mov	edx,OFFSET ??0003
 00000188  E8 00000000 E     1		call	WriteString
 0000018D  5A		     1		pop	edx
 0000018E  BA 00000D8C R			mov edx, offset guessLetterArray
 00000193  E8 00000000 E			call WriteString                ; write a string pointed to by EDX
 00000198  E8 00000000 E			call Crlf                       ; new line
 0000019D  E8 00000000 E			call Crlf						; new line

 000001A2  B8 0000000F				mov  eax,white+(black*16)
 000001A7  E8 00000000 E			call SetTextColor

 000001AC  E9 FFFFFECC				jmp again_input_world			; Guess next letter	

 000001B1			loop_take_live:

 000001B1  FF 0D 00000D3C R			dec statusGameLive
 000001B7  E9 FFFFFEC1				jmp again_input_world			; Guess next letter

 000001BC			loop_game_win:
					
					mGotoxy 0, 15
 000001BC  52		     1		push edx
 000001BD  B6 0F	     1		mov  dh,15
 000001BF  B2 00	     1		mov  dl,0
 000001C1  E8 00000000 E     1		call Gotoxy
 000001C6  5A		     1		pop  edx
						
				  ; Write a string to the console:
					INVOKE WriteConsole,
						consoleHandle,				;console output handle
						ADDR HANGMAN_GOODGAME_00,   ; string pointer
						messageSizeGoodGame,		; string length
						ADDR bytesWritten,			; returns num bytes written
						0							; not used
 000001C7  6A 00	   *	    push   +000000000h
 000001C9  68 000003E4 R   *	    push   OFFSET bytesWritten
 000001CE  FF 35 00000481 R *	    push   messageSizeGoodGame
 000001D4  68 000003E8 R   *	    push   OFFSET HANGMAN_GOODGAME_00
 000001D9  FF 35 000003E0 R *	    push   consoleHandle
 000001DF  E8 00000000 E   *	    call   WriteConsoleA

 000001E4  B8 000003E8			mov eax, drowDelay
 000001E9  E8 00000000 E		call Delay
					mGotoxy 0, 15
 000001EE  52		     1		push edx
 000001EF  B6 0F	     1		mov  dh,15
 000001F1  B2 00	     1		mov  dl,0
 000001F3  E8 00000000 E     1		call Gotoxy
 000001F8  5A		     1		pop  edx
 000001F9  B8 00000002			mov  eax,green+(black*16)
 000001FE  E8 00000000 E	    call SetTextColor

				  ; Write a string to the console:
					INVOKE WriteConsole,
						consoleHandle,				;console output handle
						ADDR HANGMAN_GOODGAME_01,   ; string pointer
						messageSizeGoodGame,		; string length
						ADDR bytesWritten,			; returns num bytes written
						0							; not used
 00000203  6A 00	   *	    push   +000000000h
 00000205  68 000003E4 R   *	    push   OFFSET bytesWritten
 0000020A  FF 35 00000481 R *	    push   messageSizeGoodGame
 00000210  68 00000485 R   *	    push   OFFSET HANGMAN_GOODGAME_01
 00000215  FF 35 000003E0 R *	    push   consoleHandle
 0000021B  E8 00000000 E   *	    call   WriteConsoleA

 00000220  B8 000003E8			mov eax, drowDelay
 00000225  E8 00000000 E		call Delay
					mGotoxy 0, 15
 0000022A  52		     1		push edx
 0000022B  B6 0F	     1		mov  dh,15
 0000022D  B2 00	     1		mov  dl,0
 0000022F  E8 00000000 E     1		call Gotoxy
 00000234  5A		     1		pop  edx
 00000235  B8 0000000E			mov  eax,yellow+(black*16)
 0000023A  E8 00000000 E	    call SetTextColor

				  ; Write a string to the console:
					INVOKE WriteConsole,
						consoleHandle,				;console output handle
						ADDR HANGMAN_GOODGAME_02,   ; string pointer
						messageSizeGoodGame,		; string length
						ADDR bytesWritten,			; returns num bytes written
						0							; not used
 0000023F  6A 00	   *	    push   +000000000h
 00000241  68 000003E4 R   *	    push   OFFSET bytesWritten
 00000246  FF 35 00000481 R *	    push   messageSizeGoodGame
 0000024C  68 0000051E R   *	    push   OFFSET HANGMAN_GOODGAME_02
 00000251  FF 35 000003E0 R *	    push   consoleHandle
 00000257  E8 00000000 E   *	    call   WriteConsoleA

 0000025C  B8 000003E8			mov eax, drowDelay
 00000261  E8 00000000 E		call Delay
					mGotoxy 0, 15
 00000266  52		     1		push edx
 00000267  B6 0F	     1		mov  dh,15
 00000269  B2 00	     1		mov  dl,0
 0000026B  E8 00000000 E     1		call Gotoxy
 00000270  5A		     1		pop  edx
 00000271  B8 00000003			mov  eax,cyan+(black*16)
 00000276  E8 00000000 E	    call SetTextColor

				  ; Write a string to the console:
					INVOKE WriteConsole,
						consoleHandle,				;console output handle
						ADDR HANGMAN_GOODGAME_03,   ; string pointer
						messageSizeGoodGame,		; string length
						ADDR bytesWritten,			; returns num bytes written
						0							; not used
 0000027B  6A 00	   *	    push   +000000000h
 0000027D  68 000003E4 R   *	    push   OFFSET bytesWritten
 00000282  FF 35 00000481 R *	    push   messageSizeGoodGame
 00000288  68 000005B7 R   *	    push   OFFSET HANGMAN_GOODGAME_03
 0000028D  FF 35 000003E0 R *	    push   consoleHandle
 00000293  E8 00000000 E   *	    call   WriteConsoleA

 00000298  B8 000003E8			mov eax, drowDelay
 0000029D  E8 00000000 E		call Delay
					mGotoxy 0, 15
 000002A2  52		     1		push edx
 000002A3  B6 0F	     1		mov  dh,15
 000002A5  B2 00	     1		mov  dl,0
 000002A7  E8 00000000 E     1		call Gotoxy
 000002AC  5A		     1		pop  edx
 000002AD  B8 00000004			mov  eax,red+(black*16)
 000002B2  E8 00000000 E	    call SetTextColor
					
 000002B7  FE 0D 00000DBF R		dec var_loop
 000002BD  80 3D 00000DBF R		cmp var_loop, 0
	   00
 000002C4  0F 85 FFFFFEF2		jne loop_game_win

 000002CA  E9 FFFFFE76			jmp exit_main			
					
					
 000002CF			loop_game_over:
					
					mGotoxy 0, 15
 000002CF  52		     1		push edx
 000002D0  B6 0F	     1		mov  dh,15
 000002D2  B2 00	     1		mov  dl,0
 000002D4  E8 00000000 E     1		call Gotoxy
 000002D9  5A		     1		pop  edx
						
				  ; Write a string to the console:
					INVOKE WriteConsole,
						consoleHandle,				;console output handle
						ADDR HANGMAN_GAMEOVER_00,   ; string pointer
						messageSizeGoodGame,		; string length
						ADDR bytesWritten,			; returns num bytes written
						0							; not used
 000002DA  6A 00	   *	    push   +000000000h
 000002DC  68 000003E4 R   *	    push   OFFSET bytesWritten
 000002E1  FF 35 00000481 R *	    push   messageSizeGoodGame
 000002E7  68 00000650 R   *	    push   OFFSET HANGMAN_GAMEOVER_00
 000002EC  FF 35 000003E0 R *	    push   consoleHandle
 000002F2  E8 00000000 E   *	    call   WriteConsoleA

 000002F7  B8 000003E8			mov eax, drowDelay
 000002FC  E8 00000000 E		call Delay
					mGotoxy 0, 15
 00000301  52		     1		push edx
 00000302  B6 0F	     1		mov  dh,15
 00000304  B2 00	     1		mov  dl,0
 00000306  E8 00000000 E     1		call Gotoxy
 0000030B  5A		     1		pop  edx
 0000030C  B8 00000002			mov  eax,green+(black*16)
 00000311  E8 00000000 E	    call SetTextColor

				  ; Write a string to the console:
					INVOKE WriteConsole,
						consoleHandle,				;console output handle
						ADDR HANGMAN_GAMEOVER_01,   ; string pointer
						messageSizeGoodGame,		; string length
						ADDR bytesWritten,			; returns num bytes written
						0							; not used
 00000316  6A 00	   *	    push   +000000000h
 00000318  68 000003E4 R   *	    push   OFFSET bytesWritten
 0000031D  FF 35 00000481 R *	    push   messageSizeGoodGame
 00000323  68 000006E9 R   *	    push   OFFSET HANGMAN_GAMEOVER_01
 00000328  FF 35 000003E0 R *	    push   consoleHandle
 0000032E  E8 00000000 E   *	    call   WriteConsoleA

 00000333  B8 000003E8			mov eax, drowDelay
 00000338  E8 00000000 E		call Delay
					mGotoxy 0, 15
 0000033D  52		     1		push edx
 0000033E  B6 0F	     1		mov  dh,15
 00000340  B2 00	     1		mov  dl,0
 00000342  E8 00000000 E     1		call Gotoxy
 00000347  5A		     1		pop  edx
 00000348  B8 0000000E			mov  eax,yellow+(black*16)
 0000034D  E8 00000000 E	    call SetTextColor

				  ; Write a string to the console:
					INVOKE WriteConsole,
						consoleHandle,				;console output handle
						ADDR HANGMAN_GAMEOVER_02,   ; string pointer
						messageSizeGoodGame,		; string length
						ADDR bytesWritten,			; returns num bytes written
						0							; not used
 00000352  6A 00	   *	    push   +000000000h
 00000354  68 000003E4 R   *	    push   OFFSET bytesWritten
 00000359  FF 35 00000481 R *	    push   messageSizeGoodGame
 0000035F  68 00000782 R   *	    push   OFFSET HANGMAN_GAMEOVER_02
 00000364  FF 35 000003E0 R *	    push   consoleHandle
 0000036A  E8 00000000 E   *	    call   WriteConsoleA

 0000036F  B8 000003E8			mov eax, drowDelay
 00000374  E8 00000000 E		call Delay
					mGotoxy 0, 15
 00000379  52		     1		push edx
 0000037A  B6 0F	     1		mov  dh,15
 0000037C  B2 00	     1		mov  dl,0
 0000037E  E8 00000000 E     1		call Gotoxy
 00000383  5A		     1		pop  edx
 00000384  B8 00000003			mov  eax,cyan+(black*16)
 00000389  E8 00000000 E	    call SetTextColor

				  ; Write a string to the console:
					INVOKE WriteConsole,
						consoleHandle,				;console output handle
						ADDR HANGMAN_GAMEOVER_03,   ; string pointer
						messageSizeGoodGame,		; string length
						ADDR bytesWritten,			; returns num bytes written
						0							; not used
 0000038E  6A 00	   *	    push   +000000000h
 00000390  68 000003E4 R   *	    push   OFFSET bytesWritten
 00000395  FF 35 00000481 R *	    push   messageSizeGoodGame
 0000039B  68 0000081B R   *	    push   OFFSET HANGMAN_GAMEOVER_03
 000003A0  FF 35 000003E0 R *	    push   consoleHandle
 000003A6  E8 00000000 E   *	    call   WriteConsoleA

 000003AB  B8 000003E8			mov eax, drowDelay
 000003B0  E8 00000000 E		call Delay
					mGotoxy 0, 15
 000003B5  52		     1		push edx
 000003B6  B6 0F	     1		mov  dh,15
 000003B8  B2 00	     1		mov  dl,0
 000003BA  E8 00000000 E     1		call Gotoxy
 000003BF  5A		     1		pop  edx
 000003C0  B8 00000004			mov  eax,red+(black*16)
 000003C5  E8 00000000 E	    call SetTextColor
					
 000003CA  FE 0D 00000DBF R		dec var_loop
 000003D0  80 3D 00000DBF R		cmp var_loop, 0
	   00
 000003D7  0F 85 FFFFFEF2		jne loop_game_over

 000003DD  E9 FFFFFD63			jmp exit_main					


 000003E2			main ENDP

 000003E2			find_str PROC					; ARG: EDX = index
 000003E2  8D 3D 00000CE7 R	    lea edi, manyWords          ; Address of string list

 000003E8  B9 00000055		    mov ecx, len                ; Maximal number of bytes to scan
 000003ED  32 C0		    xor al, al                  ; Scan for 0

 000003EF			    @@:
 000003EF  83 EA 01		    sub edx, 1					
 000003F2  72 04		    jc done                     ; No index left to scan = string found
 000003F4  F2/ AE		    repne scasb                 ; Scan for AL
 000003F6  EB F7		    jmp @B                      ; Next string

 000003F8			  done:
 000003F8  C3				ret

 000003F9			find_str ENDP                   ; RESULT: EDI pointer to string[edx]

 000003F9			make_array_dash PROC     
 000003F9  BA 00000D40 R		mov  edx,OFFSET selectedWords
 000003FE  E8 00000000 E	    call StrLength              ; Length of a null-terminated string pointed to by EDX
 00000403  A3 00000D55 R	    mov  lengthArray,eax

 00000408  B0 2D		    mov al, '-'                 ; Default charcter for guessWords
 0000040A  8B 0D 00000D55 R	    mov ecx, lengthArray		; REP counter
 00000410  BF 00000D5A R	    mov edi, offset guessWords  ; Destination
 00000415  F3/ AA		    rep stosb                   ; Build guessWords
 00000417  C6 07 00		    mov BYTE PTR [edi], 0       ; Store the null termination

 0000041A  C3			    ret
 0000041B			make_array_dash ENDP  

 0000041B			make_array_guess_letter PROC     
 0000041B  BA 00000D8C R		mov  edx, OFFSET guessLetterArray
 00000420  E8 00000000 E	    call StrLength				; Length of a null-terminated string pointed to by EDX
 00000425  A3 00000D55 R	    mov  lengthArray, eax

 0000042A  BF 00000D8C R	    mov edi, offset guessLetterArray ; Destination
 0000042F  03 3D 00000D55 R	    add edi, lengthArray
 00000435  A0 00000D59 R		mov al, guessLetter
 0000043A  88 07			mov BYTE PTR [edi], al      ; Store guessLetter
 0000043C  47				inc edi
 0000043D  C6 07 2C			mov BYTE PTR [edi], ','     ; Store the null termination

 00000440  C3			    ret
 00000441			make_array_guess_letter ENDP  

 00000441			print_hangman_live PROC  

 00000441  A1 00000D3C R		mov eax, statusGameLive

 00000446  83 F8 06			cmp eax, 6
 00000449  74 36			je live_6
 0000044B  83 F8 05			cmp eax, 5
 0000044E  0F 84 00000089		je live_5
 00000454  83 F8 04			cmp eax, 4
 00000457  0F 84 000000DC		je live_4
 0000045D  83 F8 03			cmp eax, 3
 00000460  0F 84 0000012F		je live_3
 00000466  83 F8 02			cmp eax, 2
 00000469  0F 84 00000182		je live_2
 0000046F  83 F8 01			cmp eax, 1
 00000472  0F 84 000001D5		je live_1
 00000478  83 F8 00			cmp eax, 0
 0000047B  0F 84 00000228		je live_0

 00000481			live_6:	  ; Write a string to the console:
					INVOKE WriteConsole,
						consoleHandle,				; console output handle
						ADDR HANGMAN_LIVES_06,      ; string pointer
						messageSizeGoodGame,		; string length
						ADDR bytesWritten,			; returns num bytes written
						0							; not used
 00000481  6A 00	   *	    push   +000000000h
 00000483  68 000003E4 R   *	    push   OFFSET bytesWritten
 00000488  FF 35 00000481 R *	    push   messageSizeGoodGame
 0000048E  68 000008B4 R   *	    push   OFFSET HANGMAN_LIVES_06
 00000493  FF 35 000003E0 R *	    push   consoleHandle
 00000499  E8 00000000 E   *	    call   WriteConsoleA
 0000049E  E8 00000000 E		call Crlf						; new line
 000004A3  E8 00000000 E		call Crlf						; new line
 000004A8  BA 00000D5A R		mov edx, offset guessWords
 000004AD  E8 00000000 E		call WriteString                ; write a string pointed to by EDX
 000004B2  E8 00000000 E		call Crlf                       ; new line
 000004B7  E8 00000000 E		call Crlf						; new line
					mWrite <"Guessed letter are: ">
 00000E42		     1		.data		
 00000E42 47 75 65 73 73     1		??0004 BYTE "Guessed letter are: ",0	
	   65 64 20 6C 65
	   74 74 65 72 20
	   61 72 65 3A 20
	   00
 000004BC		     1		.code
 000004BC  52		     1		push	edx
 000004BD  BA 00000E42 R     1		mov	edx,OFFSET ??0004
 000004C2  E8 00000000 E     1		call	WriteString
 000004C7  5A		     1		pop	edx
 000004C8  BA 00000D8C R		mov edx, offset guessLetterArray
 000004CD  E8 00000000 E		call WriteString                ; write a string pointed to by EDX
 000004D2  E8 00000000 E		call Crlf                       ; new line
 000004D7  E8 00000000 E		call Crlf                       ; new line
 000004DC  C3				ret

 000004DD			live_5:   ; Write a string to the console:
					INVOKE WriteConsole,
						consoleHandle,				;console output handle
						ADDR HANGMAN_LIVES_05,      ; string pointer
						messageSizeGoodGame,		; string length
						ADDR bytesWritten,			; returns num bytes written
						0							; not used
 000004DD  6A 00	   *	    push   +000000000h
 000004DF  68 000003E4 R   *	    push   OFFSET bytesWritten
 000004E4  FF 35 00000481 R *	    push   messageSizeGoodGame
 000004EA  68 0000094D R   *	    push   OFFSET HANGMAN_LIVES_05
 000004EF  FF 35 000003E0 R *	    push   consoleHandle
 000004F5  E8 00000000 E   *	    call   WriteConsoleA
 000004FA  E8 00000000 E		call Crlf						; new line
 000004FF  E8 00000000 E		call Crlf						; new line
 00000504  BA 00000D5A R		mov edx, offset guessWords
 00000509  E8 00000000 E		call WriteString                ; write a string pointed to by EDX
 0000050E  E8 00000000 E		call Crlf                       ; new line
 00000513  E8 00000000 E		call Crlf						; new line
					mWrite <"Guessed letter are: ">
 00000E57		     1		.data		
 00000E57 47 75 65 73 73     1		??0005 BYTE "Guessed letter are: ",0	
	   65 64 20 6C 65
	   74 74 65 72 20
	   61 72 65 3A 20
	   00
 00000518		     1		.code
 00000518  52		     1		push	edx
 00000519  BA 00000E57 R     1		mov	edx,OFFSET ??0005
 0000051E  E8 00000000 E     1		call	WriteString
 00000523  5A		     1		pop	edx
 00000524  BA 00000D8C R		mov edx, offset guessLetterArray
 00000529  E8 00000000 E		call WriteString                ; write a string pointed to by EDX
 0000052E  E8 00000000 E		call Crlf                       ; new line
 00000533  E8 00000000 E		call Crlf                       ; new line
 00000538  C3				ret

 00000539			live_4:   ; Write a string to the console:
					INVOKE WriteConsole,
						consoleHandle,				;console output handle
						ADDR HANGMAN_LIVES_04,      ; string pointer
						messageSizeGoodGame,		; string length
						ADDR bytesWritten,			; returns num bytes written
						0							; not used
 00000539  6A 00	   *	    push   +000000000h
 0000053B  68 000003E4 R   *	    push   OFFSET bytesWritten
 00000540  FF 35 00000481 R *	    push   messageSizeGoodGame
 00000546  68 000009E6 R   *	    push   OFFSET HANGMAN_LIVES_04
 0000054B  FF 35 000003E0 R *	    push   consoleHandle
 00000551  E8 00000000 E   *	    call   WriteConsoleA
 00000556  E8 00000000 E		call Crlf						; new line
 0000055B  E8 00000000 E		call Crlf						; new line
 00000560  BA 00000D5A R		mov edx, offset guessWords
 00000565  E8 00000000 E		call WriteString                ; write a string pointed to by EDX
 0000056A  E8 00000000 E		call Crlf                       ; new line
 0000056F  E8 00000000 E		call Crlf						; new line
					mWrite <"Guessed letter are: ">
 00000E6C		     1		.data		
 00000E6C 47 75 65 73 73     1		??0006 BYTE "Guessed letter are: ",0	
	   65 64 20 6C 65
	   74 74 65 72 20
	   61 72 65 3A 20
	   00
 00000574		     1		.code
 00000574  52		     1		push	edx
 00000575  BA 00000E6C R     1		mov	edx,OFFSET ??0006
 0000057A  E8 00000000 E     1		call	WriteString
 0000057F  5A		     1		pop	edx
 00000580  BA 00000D8C R		mov edx, offset guessLetterArray
 00000585  E8 00000000 E		call WriteString                ; write a string pointed to by EDX
 0000058A  E8 00000000 E		call Crlf                       ; new line
 0000058F  E8 00000000 E		call Crlf                       ; new line
 00000594  C3				ret

 00000595			live_3:   ; Write a string to the console:
					INVOKE WriteConsole,
						consoleHandle,				;console output handle
						ADDR HANGMAN_LIVES_03,      ; string pointer
						messageSizeGoodGame,		; string length
						ADDR bytesWritten,			; returns num bytes written
						0							; not used
 00000595  6A 00	   *	    push   +000000000h
 00000597  68 000003E4 R   *	    push   OFFSET bytesWritten
 0000059C  FF 35 00000481 R *	    push   messageSizeGoodGame
 000005A2  68 00000A7F R   *	    push   OFFSET HANGMAN_LIVES_03
 000005A7  FF 35 000003E0 R *	    push   consoleHandle
 000005AD  E8 00000000 E   *	    call   WriteConsoleA
 000005B2  E8 00000000 E		call Crlf						; new line
 000005B7  E8 00000000 E		call Crlf						; new line
 000005BC  BA 00000D5A R		mov edx, offset guessWords
 000005C1  E8 00000000 E		call WriteString                ; write a string pointed to by EDX
 000005C6  E8 00000000 E		call Crlf                       ; new line
 000005CB  E8 00000000 E		call Crlf						; new line
					mWrite <"Guessed letter are: ">
 00000E81		     1		.data		
 00000E81 47 75 65 73 73     1		??0007 BYTE "Guessed letter are: ",0	
	   65 64 20 6C 65
	   74 74 65 72 20
	   61 72 65 3A 20
	   00
 000005D0		     1		.code
 000005D0  52		     1		push	edx
 000005D1  BA 00000E81 R     1		mov	edx,OFFSET ??0007
 000005D6  E8 00000000 E     1		call	WriteString
 000005DB  5A		     1		pop	edx
 000005DC  BA 00000D8C R		mov edx, offset guessLetterArray
 000005E1  E8 00000000 E		call WriteString                ; write a string pointed to by EDX
 000005E6  E8 00000000 E		call Crlf                       ; new line
 000005EB  E8 00000000 E		call Crlf                       ; new line
 000005F0  C3				ret

 000005F1			live_2:   ; Write a string to the console:
					INVOKE WriteConsole,
						consoleHandle,				;console output handle
						ADDR HANGMAN_LIVES_02,      ; string pointer
						messageSizeGoodGame,		; string length
						ADDR bytesWritten,			; returns num bytes written
						0							; not used
 000005F1  6A 00	   *	    push   +000000000h
 000005F3  68 000003E4 R   *	    push   OFFSET bytesWritten
 000005F8  FF 35 00000481 R *	    push   messageSizeGoodGame
 000005FE  68 00000B18 R   *	    push   OFFSET HANGMAN_LIVES_02
 00000603  FF 35 000003E0 R *	    push   consoleHandle
 00000609  E8 00000000 E   *	    call   WriteConsoleA
 0000060E  E8 00000000 E		call Crlf						; new line
 00000613  E8 00000000 E		call Crlf						; new line
 00000618  BA 00000D5A R		mov edx, offset guessWords
 0000061D  E8 00000000 E		call WriteString                ; write a string pointed to by EDX
 00000622  E8 00000000 E		call Crlf                       ; new line
 00000627  E8 00000000 E		call Crlf						; new line
					mWrite <"Guessed letter are: ">
 00000E96		     1		.data		
 00000E96 47 75 65 73 73     1		??0008 BYTE "Guessed letter are: ",0	
	   65 64 20 6C 65
	   74 74 65 72 20
	   61 72 65 3A 20
	   00
 0000062C		     1		.code
 0000062C  52		     1		push	edx
 0000062D  BA 00000E96 R     1		mov	edx,OFFSET ??0008
 00000632  E8 00000000 E     1		call	WriteString
 00000637  5A		     1		pop	edx
 00000638  BA 00000D8C R		mov edx, offset guessLetterArray
 0000063D  E8 00000000 E		call WriteString                ; write a string pointed to by EDX
 00000642  E8 00000000 E		call Crlf                       ; new line
 00000647  E8 00000000 E		call Crlf                       ; new line
 0000064C  C3				ret

 0000064D			live_1:   ; Write a string to the console:
					INVOKE WriteConsole,
						consoleHandle,				;console output handle
						ADDR HANGMAN_LIVES_01,      ; string pointer
						messageSizeGoodGame,		; string length
						ADDR bytesWritten,			; returns num bytes written
						0							; not used
 0000064D  6A 00	   *	    push   +000000000h
 0000064F  68 000003E4 R   *	    push   OFFSET bytesWritten
 00000654  FF 35 00000481 R *	    push   messageSizeGoodGame
 0000065A  68 00000BB1 R   *	    push   OFFSET HANGMAN_LIVES_01
 0000065F  FF 35 000003E0 R *	    push   consoleHandle
 00000665  E8 00000000 E   *	    call   WriteConsoleA
 0000066A  E8 00000000 E		call Crlf						; new line
 0000066F  E8 00000000 E		call Crlf						; new line
 00000674  BA 00000D5A R		mov edx, offset guessWords
 00000679  E8 00000000 E		call WriteString                ; write a string pointed to by EDX
 0000067E  E8 00000000 E		call Crlf                       ; new line
 00000683  E8 00000000 E		call Crlf						; new line
					mWrite <"Guessed letter are: ">
 00000EAB		     1		.data		
 00000EAB 47 75 65 73 73     1		??0009 BYTE "Guessed letter are: ",0	
	   65 64 20 6C 65
	   74 74 65 72 20
	   61 72 65 3A 20
	   00
 00000688		     1		.code
 00000688  52		     1		push	edx
 00000689  BA 00000EAB R     1		mov	edx,OFFSET ??0009
 0000068E  E8 00000000 E     1		call	WriteString
 00000693  5A		     1		pop	edx
 00000694  BA 00000D8C R		mov edx, offset guessLetterArray
 00000699  E8 00000000 E		call WriteString                ; write a string pointed to by EDX
 0000069E  E8 00000000 E		call Crlf                       ; new line
 000006A3  E8 00000000 E		call Crlf                       ; new line
 000006A8  C3				ret

 000006A9			live_0:   ; Write a string to the console:
					INVOKE WriteConsole,
						consoleHandle,				;console output handle
						ADDR HANGMAN_LIVES_00,      ; string pointer
						messageSizeGoodGame,		; string length
						ADDR bytesWritten,			; returns num bytes written
						0							; not used
 000006A9  6A 00	   *	    push   +000000000h
 000006AB  68 000003E4 R   *	    push   OFFSET bytesWritten
 000006B0  FF 35 00000481 R *	    push   messageSizeGoodGame
 000006B6  68 00000C4A R   *	    push   OFFSET HANGMAN_LIVES_00
 000006BB  FF 35 000003E0 R *	    push   consoleHandle
 000006C1  E8 00000000 E   *	    call   WriteConsoleA
 000006C6  E8 00000000 E		call Crlf						; new line
 000006CB  E8 00000000 E		call Crlf						; new line
 000006D0  BA 00000D5A R		mov edx, offset guessWords
 000006D5  E8 00000000 E		call WriteString                ; write a string pointed to by EDX
 000006DA  E8 00000000 E		call Crlf                       ; new line
 000006DF  E8 00000000 E		call Crlf						; new line
					mWrite <"Guessed letter are: ">
 00000EC0		     1		.data		
 00000EC0 47 75 65 73 73     1		??000A BYTE "Guessed letter are: ",0	
	   65 64 20 6C 65
	   74 74 65 72 20
	   61 72 65 3A 20
	   00
 000006E4		     1		.code
 000006E4  52		     1		push	edx
 000006E5  BA 00000EC0 R     1		mov	edx,OFFSET ??000A
 000006EA  E8 00000000 E     1		call	WriteString
 000006EF  5A		     1		pop	edx
 000006F0  BA 00000D8C R		mov edx, offset guessLetterArray
 000006F5  E8 00000000 E		call WriteString                ; write a string pointed to by EDX
 000006FA  E8 00000000 E		call Crlf                       ; new line
 000006FF  E8 00000000 E		call Crlf                       ; new line
 00000704  C3				ret
						
 00000705			print_hangman_live ENDP  

				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    06/05/17 19:20:11
AddTwo.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000ED5 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000705 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
find_str . . . . . . . . . . . .	P Near	 000003E2 _TEXT	Length= 00000017 Public STDCALL
  done . . . . . . . . . . . . .	L Near	 000003F8 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000003E2 Public STDCALL
  again_input_world  . . . . . .	L Near	 0000007D _TEXT	
  uppercase  . . . . . . . . . .	L Near	 000000BD _TEXT	
  ride_hard_loop . . . . . . . .	L Near	 00000121 _TEXT	
  exit_main  . . . . . . . . . .	L Near	 00000145 _TEXT	
  loop_guess_letter_exists . . .	L Near	 0000014C _TEXT	
  loop_take_live . . . . . . . .	L Near	 000001B1 _TEXT	
  loop_game_win  . . . . . . . .	L Near	 000001BC _TEXT	
  loop_game_over . . . . . . . .	L Near	 000002CF _TEXT	
make_array_dash  . . . . . . . .	P Near	 000003F9 _TEXT	Length= 00000022 Public STDCALL
make_array_guess_letter  . . . .	P Near	 0000041B _TEXT	Length= 00000026 Public STDCALL
print_hangman_live . . . . . . .	P Near	 00000441 _TEXT	Length= 000002C4 Public STDCALL
  live_6 . . . . . . . . . . . .	L Near	 00000481 _TEXT	
  live_5 . . . . . . . . . . . .	L Near	 000004DD _TEXT	
  live_4 . . . . . . . . . . . .	L Near	 00000539 _TEXT	
  live_3 . . . . . . . . . . . .	L Near	 00000595 _TEXT	
  live_2 . . . . . . . . . . . .	L Near	 000005F1 _TEXT	
  live_1 . . . . . . . . . . . .	L Near	 0000064D _TEXT	
  live_0 . . . . . . . . . . . .	L Near	 000006A9 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00000DC0 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00000DD1 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 00000DF4 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00000E2D _DATA	
??0004 . . . . . . . . . . . . .	Byte	 00000E42 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 00000E57 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 00000E6C _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00000E81 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 00000E96 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 00000EAB _DATA	
??000A . . . . . . . . . . . . .	Byte	 00000EC0 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HANGMAN_GAMEOVER_00  . . . . . .	Byte	 00000650 _DATA	
HANGMAN_GAMEOVER_01  . . . . . .	Byte	 000006E9 _DATA	
HANGMAN_GAMEOVER_02  . . . . . .	Byte	 00000782 _DATA	
HANGMAN_GAMEOVER_03  . . . . . .	Byte	 0000081B _DATA	
HANGMAN_GOODGAME_00  . . . . . .	Byte	 000003E8 _DATA	
HANGMAN_GOODGAME_01  . . . . . .	Byte	 00000485 _DATA	
HANGMAN_GOODGAME_02  . . . . . .	Byte	 0000051E _DATA	
HANGMAN_GOODGAME_03  . . . . . .	Byte	 000005B7 _DATA	
HANGMAN_LIVES_00 . . . . . . . .	Byte	 00000C4A _DATA	
HANGMAN_LIVES_01 . . . . . . . .	Byte	 00000BB1 _DATA	
HANGMAN_LIVES_02 . . . . . . . .	Byte	 00000B18 _DATA	
HANGMAN_LIVES_03 . . . . . . . .	Byte	 00000A7F _DATA	
HANGMAN_LIVES_04 . . . . . . . .	Byte	 000009E6 _DATA	
HANGMAN_LIVES_05 . . . . . . . .	Byte	 0000094D _DATA	
HANGMAN_LIVES_06 . . . . . . . .	Byte	 000008B4 _DATA	
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesWritten . . . . . . . . . .	DWord	 000003E4 _DATA	
consoleHandle  . . . . . . . . .	DWord	 000003E0 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
drowDelay  . . . . . . . . . . .	Number	 000003E8h   
endl . . . . . . . . . . . . . .	Text   	 0dh,0ah
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
guessLetterArray . . . . . . . .	Byte	 00000D8C _DATA	
guessLetter  . . . . . . . . . .	Byte	 00000D59 _DATA	
guessWords . . . . . . . . . . .	Byte	 00000D5A _DATA	
lengthArray  . . . . . . . . . .	DWord	 00000D55 _DATA	
len  . . . . . . . . . . . . . .	Number	 00000055h   
letterDash . . . . . . . . . . .	Byte	 00000DBE _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
manyWords  . . . . . . . . . . .	Byte	 00000CE7 _DATA	
messageSizeGoodGame  . . . . . .	DWord	 00000481 _DATA	
messageSize  . . . . . . . . . .	DWord	 000003DC _DATA	
message  . . . . . . . . . . . .	Byte	 00000000 _DATA	
ranNum . . . . . . . . . . . . .	DWord	 00000CE3 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
selectedWords  . . . . . . . . .	Byte	 00000D40 _DATA	
statusGameLive . . . . . . . . .	DWord	 00000D3C _DATA	
var_loop . . . . . . . . . . . .	Byte	 00000DBF _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
